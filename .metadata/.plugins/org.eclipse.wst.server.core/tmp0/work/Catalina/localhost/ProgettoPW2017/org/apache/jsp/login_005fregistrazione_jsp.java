/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/8.0.42
 * Generated at: 2018-01-16 11:45:46 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;

public final class login_005fregistrazione_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = null;
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
        throws java.io.IOException, javax.servlet.ServletException {

final java.lang.String _jspx_method = request.getMethod();
if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method) && !javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSPs only permit GET POST or HEAD");
return;
}

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("\r\n");
      out.write("<!DOCTYPE html PUBLIC \"-//W3C//DTD HTML 4.01 Transitional//EN\" \"http://www.w3.org/TR/html4/loose.dtd\">\r\n");
      out.write("<html>\r\n");
      out.write("\r\n");
      out.write("<head>\r\n");
      out.write("<title>Accedi</title>\r\n");
      out.write("<link type=\"text/css\" rel=\"stylesheet\"\r\n");
      out.write("\thref=\"CSS/Registrazione-login.css\">\r\n");
      out.write("<script src=\"http://code.jquery.com/jquery-1.6.4.min.js\"\r\n");
      out.write("\ttype=\"text/javascript\"></script>\r\n");
      out.write("<!-- Funziona solo con connessione -->\r\n");
      out.write("</head>\r\n");
      out.write("\r\n");
      out.write("<body background=\"Imm/bianco.jpg\">\r\n");
      out.write("\t");

		if (session.getAttribute("presente") != null) // se entri per la prima volta, sara nullo, e il tipo OBject puo essere null
		{
			// MI SERVE PER MANDARE IL MESSAGGIO CHE L'UTENTE NON Ã¨ PRESENTE SUL DATABASE
			boolean flag = false;
			flag = (boolean) session.getAttribute("presente");

			if (flag != false) {
	
      out.write('\r');
      out.write('\n');
      out.write('	');
      out.write("\r\n");
      out.write("<body onload=\"errore()\">\r\n");
      out.write("\t");

		}
		}
	
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\t");

		//SU ACQUISTO
		if (session.getAttribute("loggato") != null) // se entri per la prima volta, sara nullo, e il tipo OBject puo essere null
		{

			boolean nloggato = false;
			nloggato = (boolean) session.getAttribute("loggato");
			if (nloggato != false) {
	
      out.write("\r\n");
      out.write("\r\n");
      out.write("<body onload=\"riaccedi()\">\r\n");
      out.write("\r\n");
      out.write("\t");

		}
		}
	
      out.write("\r\n");
      out.write("\r\n");
      out.write("\t<script type=\"text/javascript\">\r\n");
      out.write("\t\t// function riaccedi ()\r\n");
      out.write("\t\t// {\r\n");
      out.write("\t\t// \tvar paragrafo =$('<p>Autentificati</p>');\r\n");
      out.write("\t\t// \t$(\"body\").prepend(paragrafo);\r\n");
      out.write("\t\t// }\r\n");
      out.write("\t\tfunction errore()\r\n");
      out.write("\t\t{\r\n");
      out.write("\t\t\tvar paragrafo = $('<h5>Non Risulti, inserisci i dati!!</h5>');\r\n");
      out.write("\t\t\t$(paragrafo).css(\r\n");
      out.write("\t\t\t{\r\n");
      out.write("\t\t\t\t\"color\" : \"red\"\r\n");
      out.write("\t\t\t});\r\n");
      out.write("\t\t\t$(paragrafo).css(\r\n");
      out.write("\t\t\t{\r\n");
      out.write("\t\t\t\t\"text-align\" : \"center\"\r\n");
      out.write("\t\t\t});\r\n");
      out.write("\t\t\t// \tvar segnalazione = createElement(\"script\");\r\n");
      out.write("\t\t\t//\tsegnalazione.appendChild(document.createTextNode(\"Non sei presente\"));\r\n");
      out.write("\t\t\t$(\"body\").prepend(paragrafo);\r\n");
      out.write("\t\t\t// \t$(\"body\").appendChild(segnalazione);\r\n");
      out.write("\t\t}\r\n");
      out.write("\t\tfunction ctrluser(user)\r\n");
      out.write("\t\t{\r\n");
      out.write("\t\t\tvar c = ('^[A-Za-z0-9]+$') // caratteri alfanumerici compresi tra 'a' e 'z', da 0 a 9 con minimo 3 caratteri e massimo 15\r\n");
      out.write("\t\t\treturn verifica(user, c);\r\n");
      out.write("\t\t}\r\n");
      out.write("\t\tfunction ctrlpass(pass)\r\n");
      out.write("\t\t{\r\n");
      out.write("\t\t\t//var d=('((?=.*\\d)(?=.*[a-z])(?=.*[A-Z])(?=.*[@#$%]).{8,20})'); //password che deve contenere un numero, un carattere minuscolo, uno maiuscolo e un carattere speciale tra @#$% e deve avere lunghezza min 8 e max 20)\r\n");
      out.write("\t\t\tvar d = ('^[A-Za-z]+$');\r\n");
      out.write("\t\t\treturn verifica(pass, d);\r\n");
      out.write("\t\t}\r\n");
      out.write("\t\tfunction verifica(campo, formato)\r\n");
      out.write("\t\t{\r\n");
      out.write("\t\t\tif (campo.value.match(formato))\r\n");
      out.write("\t\t\t{\r\n");
      out.write("\t\t\t\treturn true;\r\n");
      out.write("\t\t\t} else\r\n");
      out.write("\t\t\t{\r\n");
      out.write("\t\t\t\treturn false;\r\n");
      out.write("\t\t\t}\r\n");
      out.write("\t\t}\r\n");
      out.write("\t\tfunction isEmpty(field)\r\n");
      out.write("\t\t{\r\n");
      out.write("\t\t\tif (field.value.length <= 0)\r\n");
      out.write("\t\t\t\treturn true;\r\n");
      out.write("\t\t\telse\r\n");
      out.write("\t\t\t\treturn false;\r\n");
      out.write("\t\t}\r\n");
      out.write("\t\tfunction clearForm(form)\r\n");
      out.write("\t\t{\r\n");
      out.write("\t\t\t//reset input border color\r\n");
      out.write("\t\t\tvar inputs = form.getElementsByTagName(\"input\");\r\n");
      out.write("\t\t\tfor (var i = 0; i < inputs.length; i++)\r\n");
      out.write("\t\t\t\tinputs[i].style.borderColor = \"black\";\r\n");
      out.write("\t\t\t//delete previous error messages\r\n");
      out.write("\t\t\t/* nel caso di eliminazione del messaggio di errore\r\n");
      out.write("\t\t\tvar spans = form.getElementsByTagName(\"span\");\r\n");
      out.write("\t\t\tfor(var i = 0; i<spans.length; i++)\r\n");
      out.write("\t\t\t\tform.removeChild(spans[i]);\r\n");
      out.write("\t\t\t */\r\n");
      out.write("\t\t}\r\n");
      out.write("\t\tfunction controllami(form)\r\n");
      out.write("\t\t{\r\n");
      out.write("\t\t\tvar errore = \"\";\r\n");
      out.write("\t\t\tvar errpos;\r\n");
      out.write("\t\t\tif (!ctrluser(form.user))\r\n");
      out.write("\t\t\t{\r\n");
      out.write("\t\t\t\terrpos = form[\"user\"];\r\n");
      out.write("\t\t\t\terrore = \"formato non corretto\";\r\n");
      out.write("\t\t\t} else if (!ctrlpass(form.password))\r\n");
      out.write("\t\t\t{\r\n");
      out.write("\t\t\t\terrpos = form[\"password\"];\r\n");
      out.write("\t\t\t\terrore = \"formato non correttopassword\";\r\n");
      out.write("\t\t\t}\r\n");
      out.write("\t\t\tvar inputs = form.getElementsByTagName(\"input\");\r\n");
      out.write("\t\t\tfor (var i = inputs.length - 2; i >= 0; i--)\r\n");
      out.write("\t\t\t\tif (isEmpty(inputs[i]))\r\n");
      out.write("\t\t\t\t{\r\n");
      out.write("\t\t\t\t\terrpos = inputs[i];\r\n");
      out.write("\t\t\t\t\terrore = \"Questo campo non puÃ² essere vuoto\";\r\n");
      out.write("\t\t\t\t}\r\n");
      out.write("\t\t\tif (errore != null)\r\n");
      out.write("\t\t\t{\r\n");
      out.write("\t\t\t\terrpos.style.borderColor = \"red\";\r\n");
      out.write("\t\t\t\t/*\r\n");
      out.write("\t\t\t\tvar mex= document.createTextNode(\"ERROR: \"+ errore);\r\n");
      out.write("\t\t\t\t\r\n");
      out.write("\t\t\t\tvar span= document.createElement('span');\r\n");
      out.write("\t\t\t\tspan.style.color=\"red\";\r\n");
      out.write("\t\t\t\tspan.appendChild(mex);\r\n");
      out.write("\t\t\t\tform.insertBefore(span, errpos.nextSibiling);\r\n");
      out.write("\t\t\t\t */\r\n");
      out.write("\t\t\t\treturn false;\r\n");
      out.write("\t\t\t}\r\n");
      out.write("\t\t\treturn true;\r\n");
      out.write("\t\t}\r\n");
      out.write("\t</script>\r\n");
      out.write("\r\n");
      out.write("\t<h1>Drive-in</h1>\r\n");
      out.write("\t<br>\r\n");
      out.write("\t<div>\r\n");
      out.write("\t\t<table>\r\n");
      out.write("\t\t\t<form name=\"registrazione\" action=\"Controllo\" method=\"post\"\r\n");
      out.write("\t\t\t\tonSubmit=\"return controllami(this);\">\r\n");
      out.write("\r\n");
      out.write("\t\t\t\t<tr>\r\n");
      out.write("\t\t\t\t\t<th><big><b><i><h1>Accedi</h1></i></b></big></th>\r\n");
      out.write("\t\t\t\t<tr>\r\n");
      out.write("\t\t\t\t\t<th style=\"color: Green;\"><big><b><i>Username</i></b></big></th>\r\n");
      out.write("\t\t\t\t</tr>\r\n");
      out.write("\t\t\t\t<tr>\r\n");
      out.write("\t\t\t\t\t<td><input id=\"user\" type=\"text\" name=\"user\"\r\n");
      out.write("\t\t\t\t\t\tplaceholder=\"Inserisci Username\" autofocus></input></td>\r\n");
      out.write("\t\t\t\t</tr>\r\n");
      out.write("\r\n");
      out.write("\t\t\t\t<tr>\r\n");
      out.write("\t\t\t\t\t<th style=\"color: Green;\"><big><i>Password</i></big></th>\r\n");
      out.write("\t\t\t\t</tr>\r\n");
      out.write("\t\t\t\t<tr>\r\n");
      out.write("\t\t\t\t\t<td><input id=\"password\" type=\"password\" name=\"password\" placeholder=\"Password\"></input><br>\r\n");
      out.write("\t\t\t\t\t<br></td>\r\n");
      out.write("\t\t\t\t</tr>\r\n");
      out.write("\r\n");
      out.write("\t\t\t\t<tr>\r\n");
      out.write("\t\t\t\t\t<td><input type=\"submit\" value=\"accedi\"></input><br>\r\n");
      out.write("\t\t\t\t\t<br>\r\n");
      out.write("\t\t\t\t\t<hr>Sei nuovo su Drive-In?</td>\r\n");
      out.write("\t\t\t\t</tr>\r\n");
      out.write("\t\t\t</form>\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\t\t\t<tr>\r\n");
      out.write("\t\t\t\t<td><a href=\"Registrazione.jsp\"><button>Crea il tuo Account Drive-In</button></a></td>\r\n");
      out.write("\t\t\t</tr>\r\n");
      out.write("\t\t</table>\r\n");
      out.write("\r\n");
      out.write("\t</div>\r\n");
      out.write("\r\n");
      out.write("</body>\r\n");
      out.write("</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
