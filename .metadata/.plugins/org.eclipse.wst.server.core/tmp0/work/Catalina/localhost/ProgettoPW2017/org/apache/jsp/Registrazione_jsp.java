/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/8.0.42
 * Generated at: 2018-01-18 14:29:56 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;

public final class Registrazione_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = null;
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
        throws java.io.IOException, javax.servlet.ServletException {

final java.lang.String _jspx_method = request.getMethod();
if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method) && !javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSPs only permit GET POST or HEAD");
return;
}

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("\r\n");
      out.write("<!DOCTYPE html PUBLIC \"-//W3C//DTD HTML 4.01 Transitional//EN\" \"http://www.w3.org/TR/html4/loose.dtd\">\r\n");
      out.write("<html>\r\n");
      out.write("<head>\r\n");
      out.write("<meta http-equiv=\"Content-Type\" content=\"text/html; charset=UTF-8\">\r\n");
      out.write("<link type=\"text/css\" rel=\"stylesheet\" href=\"CSS/Registrazione-login.css\">\r\n");
      out.write("<script src=\"http://code.jquery.com/jquery-1.6.4.min.js\" type=\"text/javascript\"></script> <!-- Funziona solo con connessione -->\r\n");
      out.write("<title>Registrazione</title>\r\n");
      out.write("\r\n");
      out.write("<script type=\"text/javascript\">\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("function username(username)\r\n");
      out.write("{\r\n");
      out.write("\t//var confronto = /^[A-Za-z0-9]{3-15}$/; \r\n");
      out.write("\tvar confronto =('^[A-Za-z0-9]+$');\r\n");
      out.write("\treturn verifica(username, confronto); \r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write("function password(password)\r\n");
      out.write("{\r\n");
      out.write("\t//var confronto=('((?=.*\\d)(?=.*[a-z])(?=.*[A-Z])(?=.*[@#$%]).{8,20})'); //password che deve contenere un numero, un carattere minuscolo, uno maiuscolo e un carattere speciale tra @#$% e deve avere lunghezza min 8 e max 20)\r\n");
      out.write("\tvar confronto =('^[A-Za-z0-9]+$');\r\n");
      out.write("\treturn verifica(password,confronto);\r\n");
      out.write("}\r\n");
      out.write("function name(nome)\r\n");
      out.write("{\r\n");
      out.write("\tvar confronto = /^[A-Za-z0-9]+$/; \r\n");
      out.write("\treturn verifica(nome, confronto); \r\n");
      out.write("}\r\n");
      out.write("function cognome(cognome)\r\n");
      out.write("{\r\n");
      out.write("\tvar confronto = /^[A-Za-z0-9]+$/; \r\n");
      out.write("\treturn verifica(cognome, confronto); \r\n");
      out.write("}\r\n");
      out.write("function indirizzo(indirizzo)\r\n");
      out.write("{\r\n");
      out.write("\tvar confronto = /^+[A-Za-z0-9]+$/; \r\n");
      out.write("// \tvar confronto=/^(\\w)+\\s+(\\w)+\\s+(\\d){1,4}$/;   \t\r\n");
      out.write("\treturn verifica(indirizzo, confronto);\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write("function verifica(campo, formato)\r\n");
      out.write("{\r\n");
      out.write("\tif(campo.value.match(formato))\r\n");
      out.write("\t\t{\r\n");
      out.write("\t\t\treturn true;\r\n");
      out.write("\t\t}\r\n");
      out.write("\telse\r\n");
      out.write("\t\t{\r\n");
      out.write("\t\t\treturn false;\r\n");
      out.write("\t\t}\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write("function isEmpty(field){\r\n");
      out.write("    if(field.value.length <= 0)  \r\n");
      out.write("\t\treturn true;  \r\n");
      out.write("    else  \r\n");
      out.write("\t\treturn false;\r\n");
      out.write("}\r\n");
      out.write("function clearForm(form){\r\n");
      out.write("\t//reset input border color\r\n");
      out.write("\tvar inputs = form.getElementsByTagName(\"input\");\r\n");
      out.write("\tfor(var i = 0; i<inputs.length; i++)\r\n");
      out.write("\t\tinputs[i].style.borderColor = \"black\"; \r\n");
      out.write("\t\r\n");
      out.write("\t//delete previous error messages\r\n");
      out.write("\tvar spans = form.getElementsByTagName(\"span\");\r\n");
      out.write("\tfor(var i = 0; i<spans.length; i++)\r\n");
      out.write("\t\tform.removeChild(spans[i]);\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write("function carica(form)\r\n");
      out.write("{\r\n");
      out.write("clearForm(form);\r\n");
      out.write("\tvar errore =\"\";\r\n");
      out.write("\tvar errpos;\r\n");
      out.write("\tif(!username(form.username))\r\n");
      out.write("\t\t{\r\n");
      out.write("\t\t\terrpos= form[\"username\"];\r\n");
      out.write("\t\t\terrore=\"formato non corretto min 3 max 15\";\r\n");
      out.write("\t\t}\r\n");
      out.write("\telse if(!password(form.password))\r\n");
      out.write("\t{\r\n");
      out.write("\t\terrpos= form[\"password\"];\r\n");
      out.write("\t\terrore=\" formato non corretto, min 8 max 20\";\r\n");
      out.write("\t}\r\n");
      out.write("\telse if(!indirizzo(form.indirizzo)) \r\n");
      out.write("\t\t{\r\n");
      out.write("\t\t\terrpos=form[\"indirizzo\"];\r\n");
      out.write("\t\t\terrore=\"formato non corretto\";\r\n");
      out.write("\t\t}\r\n");
      out.write("\t\t\r\n");
      out.write("\t\t\r\n");
      out.write("\t\tvar inputs = form.getElementsByTagName(\"input\");\r\n");
      out.write("\tfor(var i = inputs.length-2; i>=0; i--)\r\n");
      out.write("\t\tif (isEmpty(inputs[i])){\r\n");
      out.write("\t\r\n");
      out.write("\t\t\terrpos = inputs[i];\r\n");
      out.write("\t\t\terr = \"Questo campo non pu√≤ essere vuoto\" +i;\r\n");
      out.write("\t\t\t}\r\n");
      out.write("\r\n");
      out.write("\tif(errore != null)\r\n");
      out.write("\t\t{\r\n");
      out.write("\t\t\terrpos.style.borderColor=\"red\";\r\n");
      out.write("\t\t\treturn false;\r\n");
      out.write("\t\t}\r\n");
      out.write("\treturn true;\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write("</script>\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("</head>\r\n");
      out.write("<body background=\"Imm/bianco.jpg\">\r\n");
      out.write("<h1>Drive-in</h1>\r\n");
      out.write("<h2 >Registrazione</h2>\r\n");
      out.write("\t<div id=\"primo\">\r\n");
      out.write("\t\t<table>\r\n");
      out.write("\t\t\t<form name='example' action=\"Registrazione\" method=\"post\" onSubmit=\"return carica(this);\">\r\n");
      out.write("\t\t\t\t<tr>\r\n");
      out.write("\t\t\t\t\t<th>Crea il tuo Account Drive-In<br><br></th>\r\n");
      out.write("\t\t\t\t</tr>\r\n");
      out.write("\t\t\t\t<tr>\r\n");
      out.write("\t\t\t\t\t<td style=\"color:Green;\"><big><b><i>Username</i></b></big><br><br></td>\r\n");
      out.write("\t\t\t\t</tr>\r\n");
      out.write("\t\t\t\t<tr>\r\n");
      out.write("\t\t\t\t\t<td><input id=\"username\" type=\"text\" name=\"username\" ><br><br></td><br>\r\n");
      out.write("\t\t\t\t</tr>\r\n");
      out.write("\t\t\t\t<tr>\r\n");
      out.write("\t\t\t\t\t<td style=\"color:Green;\"><big><b><i>Password</i></b></big><br><br></td>\r\n");
      out.write("\t\t\t\t</tr>\r\n");
      out.write("\t\t\t\t<tr>\r\n");
      out.write("\t\t\t\t\t<td><input id=\"password\" type=\"password\" name=\"password\"><br><br></td>\r\n");
      out.write("\t\t\t\t</tr>\r\n");
      out.write("\t\t\t\t<tr>\r\n");
      out.write("\t\t\t\t\t<td style=\"color:Green;\"><big><b><i>Nome</i></b></big><br><br></td>\r\n");
      out.write("\t\t\t\t</tr>\r\n");
      out.write("\t\t\t\t<tr>\r\n");
      out.write("\t\t\t\t\t<td><input id=\"nome\" type=\"text\" name=\"nome\"><br><br></td>\r\n");
      out.write("\t\t\t\t</tr>\r\n");
      out.write("\t\t\t\t<tr>\r\n");
      out.write("\t\t\t\t\t<td style=\"color:Green;\"><big><b><i>Cognome</i></b></big><br><br></td>\r\n");
      out.write("\t\t\t\t</tr>\r\n");
      out.write("\t\t\t\t<tr>\r\n");
      out.write("\t\t\t\t\t<td>\r\n");
      out.write("\t\t\t\t\t<input id=\"cognome\" type=\"text\" name=\"cognome\" ><br><br></td>\r\n");
      out.write("\t\t\t\t</tr>\r\n");
      out.write("\t\t\t\t<tr>\r\n");
      out.write("\t\t\t\t\t<td style=\"color:Green;\"><big><b><i>Indirizzo fatturazione</i></b></big><br><br></td>\r\n");
      out.write("\t\t\t\t</tr>\r\n");
      out.write("\t\t\t\t<tr>\r\n");
      out.write("\t\t\t\t\t<td><input type=\"text\" name=\"indirizzo\" ><br><br>\r\n");
      out.write("\t\t\t\t\t<br></td>\r\n");
      out.write("\t\t\t\t</tr>\r\n");
      out.write("\t\t\t\t<tr>\r\n");
      out.write("\t\t\t\t\t<td><input type=\"submit\" value=\"Crea il tuo Account Drive-In\"><br></td>\r\n");
      out.write("\t\t\t\t</tr>\r\n");
      out.write("\t\t\t\t</form>\r\n");
      out.write("\t\t\t\t\r\n");
      out.write("\t\t\t\t<form>\r\n");
      out.write("\t\t\t\t<tr>\r\n");
      out.write("\t\t\t\t\t<th>Accedendo dichiari di aver letto e accetti integralmente le nostre Condizioni generali di uso e vendita, la nostra Informativa sulla privacy e le nostre policy su Cookies e pubblicit√† su Internet. <hr>\r\n");
      out.write("\t\t\t\t Disponi gi√† di un account <a href=\"login_registrazione.jsp\">Accedi</a></th>\r\n");
      out.write("\t\t\t\t\t</tr>\r\n");
      out.write("\t\t\t\t</form>\r\n");
      out.write("\t\t\t</table>\r\n");
      out.write("\t\t</div>\r\n");
      out.write("\t</body>\r\n");
      out.write("</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
